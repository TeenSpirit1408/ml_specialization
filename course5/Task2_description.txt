Задача заключается в том, чтобы применить предобученную на imagenet нейронную сеть на практической задаче классификации автомобилей.

Учиться применять нейронные сети для анализа изображений мы будем на библиотеке TensorFlow. Это известный опенсорсный проект, разработанный инженерами Google Brain Team. Подробнее почитать о TensorFlow можно на официальном сайте, на гитхабе или на хабре.

Установка окружения

Необходимо установить TensorFlow.

Инструкции по установке на сайте.
Если есть опыт работы с Docker, то можно воспользоваться готовым докер-контейнером с тензорфлоу. Чтобы пробросить данные в докер, можно воспользоваться флагом -v /src/webapp:/opt/webapp при запуске докер контейнера. Тогда директория на хосте /src/webapp будет доступна в контейнтере по /opt/webapp.
Важно! Если вы пользователь windows, то уставить tensorflow напрямую, к сожалению, не получится:

Для пользователей Windows 10 и выше и нужно использовать Docker (ссылка на дистрибутив).
Если у вас Windows старше версии 10, то и вариант с докером не подойдет — он не установится. В таком случае советуем установить линукс на локальную машину как еще одну операционную систему (поможет избежать страданий в будущем при работе с некоторыми библиотеками для ML).
Если у вас возникли проблемы по работе с Tensorflow из Docker контейнера, воспользуйтесь F.A.Q.

Если же поставить Tensorflow на вашу машину никак не получается, мы предлагаем воспользоваться одним из облачных сервисов, в который необходимо установить линукс-образ. Самые популярные облачные сервисы AWS и DigitalOcean предоставляют бесплатные инстансы (имейте в виду, что для того, чтобы ими воспользоваться, нужно будет привязать кредитную карту).

Чтобы освоить компьютерное зрение (или другие интересные задачи из области ML и AI), так или иначе придётся научиться работать с библиотеками нейронных сетей, линуксом и виртуальными серверами. Например, для более масштабных практических задач, крайне необходимы сервера с GPU, а с ними уже локально работать не получиться.Тем не менее, мы понимаем, что в силу временных ограничений курса кто-то может успеть установить TensorFlow. Поэтому мы сделали пункты 1 и 2 необязательными. На оценку они не повлияют — можете сразу переходить к третьему пункту.Помимо tensorflow, потребуется библиотека scipy. Если вы уже работали с Anaconda и/или выполняли задания в нашей специализации, то она должна присутствовать.

Данные

Скачать данные нужно тут: https://yadi.sk/d/6m_KbM4HvmLfs

Данные это часть выборки Cars Dataset (link). Исходный датасет содержит 16,185 изображений автомобилей, принадлежащих к 196 классам. Данные разделены на 8,144 тренировочных и 8,041 тестовых изображений, при этом каждый класс разделён приблизительно поровну между тестом и трейном. Все классы уровня параметров Марка, Год, Модель и др. (например, 2012 Tesla Model S or 2012 BMW M3 coupe). В нашем же случае в train 204 изображения, и в test — 202 изображения.

Что делатьПомимо данных, потребуется скачать:

код,
веса модели по ссылке.
Положите данные, код и модель в одну папку. У вас должна получиться такая структура:



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
/assignment-computer-vision/
|
|-- test              # папки  
|    `---- ...        # с
|-- train             # картинками
|    `---- ...
|
|-- class_names.txt   # имена классов, номер строки соответствует id класса
|-- results.txt       # соответствие имя картинки — id класса
|-- vgg16_weights.npz # веса модели в формате tensorflow
|
|-- vgg16.ipynb            # основной скрипт
|-- imagenet_classes.py 
|
`-- beach.jpg         # картиночка с пляжем
Задание 1.

Для начала нужно запустить готовую модель vgg16, предобученную на imagenet. Модель обучена с помощью caffe и сконвертирована в форматtensorflow - vgg16_weights.npz. Скрипт, иллюстрирующий применение этой модели к изображению, находится внутри ноутбука vgg16.ipynb и возвращает топ-5 классов из imagenet, а так же уверенность в этих классах.

Задание:

Загрузите уверенность первого класса для изображения train/00002.jpg с точностью до 1го знака после запятой.

Задание 2.

Научитесь извлекать fc2 слой. Для этого нужно модифицировать process_image, чтобы вместо последнего слоя извлекались выходы fc2.

Задание:

Посчитайте fc2 для картинки train/00002.jpg. Запишите первые 20 компонент (каждое число с новой строки, т.е. в загружаемом файле должно получиться 20 строк).

Задание 3.

Теперь необходимо дообучить классификатор на нашей базе. В качестве бейзлайна предлагается воспользоваться классификатором svm из пакета sklearn.

Модифицировать функцию get_features и добавить возможность вычислять fc2. (Мы это уже сделали в process_image).
Применить get_features, чтобы получить X_test и Y_test.
Воспользоваться классификатором, SVC с random_state=0.
Важно! Если вам не удалось поставить tensorflow, то необходимо вместо использования функции get_features, загрузить предпосчитанные X, Y, X_test, Y_train из архива: https://yadi.sk/d/RzMOK8Fjvs6Ln и воспользоваться функцией np.load для их загрузки, а после этого два последних пункта.

Задание:

Сколько правильных ответов получается на валидационной выборке из папки test? Запишите в файл.